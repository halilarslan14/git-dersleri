✅ Git Kullanıcı Adı ve Mail Tanımlama
*Global (Tüm projeler için) tanımlamak istersen:➜
git config --global user.name "Halil Ibrahim"
git config --global user.email "halil@example.com"

*Sadece bu proje için tanımlamak istersen (bulunduğun klasör için):➜
git config user.name "Halil Ibrahim"
git config user.email "halil@example.com"

🔍 Kontrol etmek için:		➜ git config --global --list

veya sadece bu proje için:	➜ git config --list

git init  			➜ Komutu, bulunduğun klasörü bir Git deposuna (repository) dönüştürür.

git add . 			➜ Bu komut, bulunduğun dizindeki tüm değişiklikleri (yeni dosyalar, silinenler, düzenlenenler) “staging area” (hazırlık alanı) denen Git’in geçici alanına ekler.

git add . 			➜ tüm değişiklikleri staging area'ya koyar
git commit 			➜ staging area’dakileri kalıcı olarak Git deposuna kaydeder
git status 			➜ Durumu kontrol eder
git log    			➜ Bu komut, projende yapılan tüm commit geçmişini listeler.
git log --oneline		➜ Daha kısa liste:
git log --oneline --graph --all	➜ Grafik ve özet görünüm
git log main.py			➜ Belirli dosyadaki commit geçmişi
git diff			➜ Dosyalarda yapılan ama git add ile eklenmemiş değişiklikleri gösterir.
git diff --staged		➜ git add yapılmış ama henüz git commit yapılmamış değişiklikleri gösterir.
git revert <commit-id>		➜ Yapılan bir commit’i iptal etmez, onu tersine çeviren yeni bir commit oluşturur.
				   Yani geçmişi bozmadan hatayı geri almış olursun. Not: commit-id ilk 7 hanesi bile yeterlidir.

git rm gereksiz.txt		➜ Dosyayı fiziksel olarak siler (çalışma klasöründen silinir)
				   Git’e “bu dosya bir sonraki commit’te silinmeli” der (staging area’ya silinmiş olarak ekler)

git rm gereksiz.txt
git commit -m 			➜ Sonuç: gereksiz.txt dosyası hem Git geçmişinden hem fiziksel klasörden silinir.

📁 Dosya ismini değiştirme:
git mv notlar.txt notlar_eski.txt
git commit -m "notlar.txt yeniden adlandırıldı" 	➜ 📁 Dosya ismini değiştirme

📂 Klasör içine taşıma:
git mv main.py src/main.py
git commit -m "main.py dosyası src klasörüne taşındı"   ➜ 📂 Klasör içine taşıma

git checkout -- dosya.txt     	➜ Bu komut, dosya.txt dosyasını en son commit’teki hâline geri döndürür. Henüz commit edilmemiş değişiklikler silinir.⚠️
git checkout -- <file_name>   	➜ <file_name>'in yerine dosya adı yazılır.
git checkout branch_adi		➜ Branch'e geçer
git checkout -b yeni_branch	➜ Yeni branch oluşturup geçer
git checkout 13069e5914a8ae88487a2c9af8a321e00c49f7f0 -- . ➜ bu HEAD ID' versiyonunu geri getirir. git commit -m "..." ile repostory almamız gerekir.

git --no-pager log		➜ Bu komut çıktıyı direkt olarak terminale basar, less içine girmez.
git remote add githupRepo https://github.com/halilarslan14/git-dersleri.git 	➜ GitHub'daki bir depoyu projeme bağlamak için kullanılır.
git push githupRepo master	➜ Uzak depoya kod göndermek için (master alanı main'de olabilir)
git branch     			➜ yerel branch'leri gösterir
git branch -r  			➜ uzaktaki (remote) branch'leri gösterir
touch dosya{1..5}.html     	➜ <dosya> alana yazılan isimle {1..5} parentez içi kadar <.html> istenilen formatta dosya oluşturur.
notepad .gitignore		➜ notepad te gitignore dosyasını açar.
git checkout main         	➜ Önce ana dala geçersin
git merge yeni_branch     	➜ yeni_branch'teki (yeni oluşturduğun daldaki) değişiklikleri main ile birleştir


git reset [--soft | --mixed | --hard] <hedef_commit> ➜ 
🔁 Modlar ve Anlamları: 
✅ git reset --soft HEAD~1	➜ 🟢# Son commit’i geri alır ama yaptığın değişiklikler hâlâ sahnede (staged)
✅ git reset --mixed HEAD~1	➜ 🟡# Son commit’i geri alır, ama değişiklikleri çalışma dizininde bırakır (sahneden alır)
⚠️ git reset --hard HEAD~1	➜ 🔴# Son commit’i geri alır ve yaptığın değişiklikleri tamamen siler (dikkat!)

				➜ 🟢Yanlış commit yaptıysan (--soft)
🤔 Ne Zaman Kullanılır?	 	➜ 🟡Fazla dosya sahnelediysen (--mixed)
	   			➜ 🔴Her şeyi geri almak istiyorsan (--hard) — dikkatli!

***git çalışma dizini: Working Directory: add ➜ Staging Area: commit ➜ Git Repository***

git-bash komutları:
pwd 				➜ bulunduğu dizini gösterir
ls 				➜ dosya ve dizinleri listeler
cd 				➜ dizine gider
